<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asp.net on Hugo Profile</title>
    <link>https://teduandy.github.io/blog/categories/asp.net/</link>
    <description>Recent content in Asp.net on Hugo Profile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Dec 2022 09:27:01 +0000</lastBuildDate><atom:link href="https://teduandy.github.io/blog/categories/asp.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dapper 使用介紹</title>
      <link>https://teduandy.github.io/blog/blogs/aspnet-dapper/</link>
      <pubDate>Thu, 08 Dec 2022 09:27:01 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/aspnet-dapper/</guid>
      <description>說明： Dapper輕量級的 ORM，必須要自己定義 C# class、管理連線、自己寫 SQL，但是套件非常迷你而且效能非常好，很適合已經學會目標資料庫語法的開發者。 安裝： 1. 專案點右鍵 -&amp;gt; 管理 NuGet 套件
2. 收尋 1. Dapper and 1. MySQL Connector 並且安裝
Dapper 連線 : 1. 定義一個用來接資料的 Model 類別： Dapper 支援泛型，只要把指定的型別告訴 Dapper，而且類別的屬性與 MySQL 的欄位有對上，Dapper 就會自動幫我們把取回來的資料放進 Model 類別。 2.開啟一個 MySQL 連線： 用 var _db = new MySqlConnection(&amp;quot;連線資訊&amp;quot;); 就能開啟連線。比較需要注意的是，最好用注入組態設定的方法取得連線資訊，以及用 using 語法自動幫我們關閉連線，以免忘記關閉造成連線被占用 3.連線資訊設定： 在專案新增一個空類 名叫 serverMq.cs 裡面是用來填入 我們從組態設定抓來的 連線字串 public class servermq { public string ConnectionString { get; set; } } 到 appsettings.json 組態設定裡面 新增 mysql 連線字串&amp;#34;AllowedHosts&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;MySQL&amp;#34;: { &amp;#34;ConnectionString&amp;#34;: &amp;#34;server=127.</description>
    </item>
    
    <item>
      <title>ASP.NET CORE 3.1 將靜態資源資料夾放入 VUE</title>
      <link>https://teduandy.github.io/blog/blogs/aspnet-aspcore3_usespa/</link>
      <pubDate>Wed, 30 Nov 2022 13:47:37 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/aspnet-aspcore3_usespa/</guid>
      <description>說明： 撰寫前後端分離的專案，通常都是分別各起一個應用程式。 也可以將後端讀取靜態資源的資料夾，當成前端的起始點。 設置教學 使用套件：Microsoft.AspNetCore.SpaServices.Extensions (目前使用版本：3.1.25) 通常靜態資源都會放入一個 wwwRoot 的資料夾，如果沒有的話可以創建一個 wwwRoot 資料夾 接下來則是在 Startp.cs 裡面進行配置 註釋的地方是要添加進去的地方 public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddControllers(); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseHttpsRedirection(); // 沒有指定檔案名稱的話就預設使用 index.html http://xxx.xxx.xx/controller/(index.html) app.UseDefaultFiles(); // 預設把 wwwRoot 資料夾底下的檔案作為靜態資源提供服務 app.UseStaticFiles(); app.UseRouting(); app.UseAuthorization(); app.UseEndpoints(endpoints =&amp;gt; { endpoints.MapControllers(); }); // 404 not found // 把後端收到的 http://xxx.</description>
    </item>
    
    <item>
      <title>ASP.NET 查看環境安裝版本</title>
      <link>https://teduandy.github.io/blog/blogs/aspnet-checkaspsdk/</link>
      <pubDate>Tue, 01 Nov 2022 08:00:00 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/aspnet-checkaspsdk/</guid>
      <description>打開 cmd 查看 Asp.Net Framework reg query &amp;#34;HKLM\Software\Microsoft\NET Framework Setup\NDP&amp;#34; /s /v version | findstr /i version | sort /+26 /r 查看 Asp.net Core 版本 指令一: Help dotnet help 指令二: 當前運行版本 dotnet --version 指令三: 查看已安装所有SDK版本 dotnet --list-sdks 指令三: 查看已安装所有版本，包括地址 dotnet --info </description>
    </item>
    
    <item>
      <title>DI 注入相關說明</title>
      <link>https://teduandy.github.io/blog/blogs/aspnet-di/</link>
      <pubDate>Sat, 22 Oct 2022 11:26:12 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/aspnet-di/</guid>
      <description>DI 圖示說明 DI注入表圖示PTT下載</description>
    </item>
    
    <item>
      <title>Asp csc.exe error</title>
      <link>https://teduandy.github.io/blog/blogs/aspnet-csc-exe-question/</link>
      <pubDate>Thu, 21 Jul 2022 09:35:18 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/aspnet-csc-exe-question/</guid>
      <description>說明 : 會出現這個原因是因為新版開啟舊版專案導致 解決方法 : 1. 先到專案底下尋找 一個附檔名為 專案名稱.csporj 2. 然後在最下面貼上這段 到這裡面 3. 然後再重新執行一次 程式 就可以了 &amp;lt;Target Name=&amp;#34;CopyRoslynFiles&amp;#34; AfterTargets=&amp;#34;AfterBuild&amp;#34; Condition=&amp;#34;!$(Disable_CopyWebApplication) And &amp;#39;$(OutDir)&amp;#39; != &amp;#39;$(OutputPath)&amp;#39;&amp;#34;&amp;gt; &amp;lt;ItemGroup&amp;gt; &amp;lt;RoslynFiles Include=&amp;#34;$(CscToolPath)\*&amp;#34; /&amp;gt; &amp;lt;/ItemGroup&amp;gt; &amp;lt;MakeDir Directories=&amp;#34;$(WebProjectOutputDir)\bin\roslyn&amp;#34; /&amp;gt; &amp;lt;Copy SourceFiles=&amp;#34;@(RoslynFiles)&amp;#34; DestinationFolder=&amp;#34;$(WebProjectOutputDir)\bin\roslyn&amp;#34; SkipUnchangedFiles=&amp;#34;true&amp;#34; Retries=&amp;#34;$(CopyRetryCount)&amp;#34; RetryDelayMilliseconds=&amp;#34;$(CopyRetryDelayMilliseconds)&amp;#34; /&amp;gt; &amp;lt;/Target&amp;gt; </description>
    </item>
    
    <item>
      <title>ASP.NET WEB API常見問題</title>
      <link>https://teduandy.github.io/blog/blogs/aspnet-asp-web-api-problem/</link>
      <pubDate>Tue, 19 Jul 2022 13:47:37 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/aspnet-asp-web-api-problem/</guid>
      <description>1. ASP.NET Or Core 中強制執行 HTTPS 說明：
測試的時候可能會出現的問題 http導到https 要求所有要求都需要 HTTPS。 將所有 HTTP 要求都重新導向至 HTTPS。 var builder = WebApplication.CreateBuilder(args); builder.Services.AddRazorPages(); var app = builder.Build(); if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler(&amp;#34;/Error&amp;#34;); app.UseHsts(); } app.UseHttpsRedirection();　／／　這個方法　會強制導到　https (建立專案測試時 請先不要用) app.UseStaticFiles(); app.UseRouting(); app.UseAuthorization(); app.MapRazorPages(); app.Run(); </description>
    </item>
    
    <item>
      <title>使用 Serilog 對應用程式事件進行結構化紀錄</title>
      <link>https://teduandy.github.io/blog/blogs/aspnet-serilog-log-set/</link>
      <pubDate>Tue, 19 Jul 2022 13:39:29 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/aspnet-serilog-log-set/</guid>
      <description>版本:Asp.net 6 1. 使用的套件: Serilog 版本: 2.11.1 Serilog-AspNetCore 版本: 6.00 2. Asp.net6 Program.cs 設定: using System; using Microsoft.AspNetCore.Builder; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Serilog; using Serilog.Events; // LOG基本設定 Log.Logger = new LoggerConfiguration() .MinimumLevel.Information() .MinimumLevel.Override(&amp;#34;Microsoft.AspNetCore&amp;#34;, LogEventLevel.Warning) .WriteTo.Console() // 執行 LOG時 輸出也會打印 .WriteTo.File(&amp;#34;../logs/log-.txt&amp;#34;, rollingInterval: RollingInterval.Day) // 輸出到哪一個資料夾 .CreateLogger(); try { Log.Information(&amp;#34;=============Starting=============&amp;#34;); // TODO: 將原本 Program.cs 所有程式碼搬到這裡 // LOG設定 必須在 APP 之前 builder.Host.UseSerilog(); // app.UseSerilogRequestLogging(); 這個 Middleware 來整理所有與 Request 相關的紀錄，讓你在一條 Log 中就可以取得目前 Request 所有的相關資訊。 app.</description>
    </item>
    
    <item>
      <title>上線使用後端搭配前端</title>
      <link>https://teduandy.github.io/blog/blogs/aspnet-frontend-with-backend-online/</link>
      <pubDate>Tue, 19 Jul 2022 11:26:12 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/aspnet-frontend-with-backend-online/</guid>
      <description>專案範例使用：Asp.net core 3.1 測試 1. 先在專案 底下 新增一個 wwwRoot 靜態資源資料夾(用於放打包好的前端) wwwRoot 資料夾 用於放靜態資源 所以 樣子不一樣
2. 接下來在 Startup.cs(.net6 在 Program.cs) 添加設定 (套件:Microsoft.AspNetCore.SpaServices.Extensions) app.UseHttpsRedirection(); //將 http 導向至 https app.UseDefaultFiles(); // 沒有指定檔案名稱的話就預設使用 index.html http://xxx.xxx.xx/controller/(index.html) app.UseStaticFiles(); // 預設把 wwwRoot 資料夾底下的檔案作為靜態資源提供服務 // 404 not found // 把後端收到的 /ORD/ORDWxxxx/app/.... 請求 全部導到 /ORD/ORDWxxx/app/index.html 靜態資源 並告訴前端 /a/b/c app.UseSpa(spa =&amp;gt; { spa.Options.SourcePath = &amp;#34;/app&amp;#34;; }); 3. 接下來 對專案 按下發佈 之後彈出畫面 在按發佈 會打包出新的包在 bin\Release\netcoreapp3.1\punlish( 裡面的東西就是要放置到 線上 ) </description>
    </item>
    
    <item>
      <title>JWT 驗證 及 創建 token</title>
      <link>https://teduandy.github.io/blog/blogs/aspnet-jwt-token/</link>
      <pubDate>Tue, 19 Jul 2022 11:00:35 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/aspnet-jwt-token/</guid>
      <description>使用的套件: Microsoft.AspNetCore.Authentication.JwtBearer 創建TOKEN 1. 先在 專案裡面 添加一個 JWT類 代碼如下： using System; using System.Collections.Generic; using System.Security.Claims; using System.Text; using System.IdentityModel.Tokens.Jwt; using Microsoft.Extensions.Configuration; using Microsoft.IdentityModel.Tokens; namespace test2 { public class JWT { private readonly IConfiguration Configuration; public JWT(IConfiguration configuration) { this.Configuration = configuration; } public string GenerateToken(string userName, int expireMinutes = 30) { // 獲取在 appsettiongs.json 裡面設定好的資訊 var issuer = Configuration.GetValue&amp;lt;string&amp;gt;(&amp;#34;Jwt:Issuer&amp;#34;); var signKey = Configuration.GetValue&amp;lt;string&amp;gt;(&amp;#34;KEY:skey&amp;#34;); // Configuring &amp;#34;Claims&amp;#34; to your JWT Token var claims = new List&amp;lt;Claim&amp;gt;(); // In RFC 7519 (Section#4), there are defined 7 built-in Claims, but we mostly use 2 of them.</description>
    </item>
    
    <item>
      <title>組態設定 appsettings.json</title>
      <link>https://teduandy.github.io/blog/blogs/aspnet-appsettings-set/</link>
      <pubDate>Tue, 19 Jul 2022 10:51:27 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/aspnet-appsettings-set/</guid>
      <description>說明： 在 appsettings.json 自己所需要的參數 避免在邏輯控制層曝露自己的帳號密碼, 只有在邏輯控制啟動時注入 到 自己寫好的 DTO裡面 並且實例化
第一種 抓取方法 IOption 使用方法： 1. 先在 appsettings.json 設定自己需要的 參數 例: 設定了一個 mysql 裡面的 connectionstring &amp;#34;AllowedHosts&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;MySQL&amp;#34;: { &amp;#34;ConnectionString&amp;#34;: &amp;#34;server=127.0.0.1;userid=root;password=123456;database=django;&amp;#34; }, 2. 然後先寫好自己要注入的DTO namespace test2 { public class servermq { public string? ConnectionString { get; set; } } } 3. 然後在 Program.cs 裡面添加 這段 (基本上 appsettings.json 獲取裡面的資訊都是用這方式) builder.Services.Configure&amp;lt;servermq&amp;gt;(builder.Configuration.GetSection(&amp;#34;MySQL&amp;#34;)); 4. 然後在 Controller 那裡 先幫 創好 一個變量 , 然後在他的建構函數下 添加這段. [ApiController] [Route(&amp;#34;[Controller]&amp;#34;)] public class UserController : Controller { private readonly servermq _options; //建構函數 public UserController(IOptions&amp;lt;servermq&amp;gt; options) { // 啟動時注入 並且把 值 賦予到 創好的變量裡面 _options = options.</description>
    </item>
    
    <item>
      <title>LINQ 相關</title>
      <link>https://teduandy.github.io/blog/blogs/aspnet-linq/</link>
      <pubDate>Tue, 19 Jul 2022 10:00:01 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/aspnet-linq/</guid>
      <description>Datatable 用法 // 抓回來的 DataTable DataTable tb = GetTB(_formno, _key); // tb.AsEnumerable() 會轉成 EnumerableRowCollection&amp;lt;DataRow&amp;gt; 類型 , 因為是 Enumerable 類型 便可以用 linq // 從裡面的資料抓取多筆 使用 where , {} 內是要寫第二行 但是 {} 不會自動 return 所以要手動 return var tmps = tb.AsEnumerable().Where(row =&amp;gt; { var num = row[&amp;#34;DTLNO&amp;#34;].ToString(); return (Convert.ToInt32(num) &amp;lt; 220 &amp;amp;&amp;amp; num != &amp;#34;215&amp;#34;) | num == &amp;#34;254&amp;#34;; }); // 單一一筆 使用 FirstOrDefault (但是這個會 一抓到一筆 馬上返回) var tmp = tb.AsEnumerable().FirstOrDefault(row =&amp;gt; row[&amp;#34;DTLNO&amp;#34;].ToString() == &amp;#34;215&amp;#34;); // 單一一筆 使用 SingleOrDefault (這個是抓到一筆 會再繼續往下 查完所有 抓到第二筆則會報錯誤) tmp = tb.</description>
    </item>
    
  </channel>
</rss>
