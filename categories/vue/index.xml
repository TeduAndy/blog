<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on Hugo Profile</title>
    <link>https://teduandy.github.io/blog/categories/vue/</link>
    <description>Recent content in vue on Hugo Profile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Sep 2022 14:16:42 +0000</lastBuildDate><atom:link href="https://teduandy.github.io/blog/categories/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VUE3 compontent $emit 和 emits 說明及設置</title>
      <link>https://teduandy.github.io/blog/blogs/vue-vue3-compontent-emits/</link>
      <pubDate>Tue, 20 Sep 2022 14:16:42 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/vue-vue3-compontent-emits/</guid>
      <description>Vue3 Compontent emit emits 說明：組件封裝了多個 emit 事件，回傳數據或者回調函數等等，外部使用時採用 @設置的emit名稱=&amp;ldquo;自己配置的方法&amp;rdquo;，從而讓 compontent 應用 外部的方法。 emits：設置組件自定義的事件名稱，設置時可以是 Array 或 Object 寫法如下 &amp;lt;script&amp;gt; // 此寫法是 cdn 使用 const compontent1 = { template: `&amp;lt;button @click=&amp;#34;this.$emit(&amp;#39;MeClick&amp;#39;)&amp;#34;&amp;gt;com&amp;lt;/button&amp;gt;`, emits: [&amp;#34;MeClick&amp;#34;], props: [&amp;#34;prop&amp;#34;], }; // 在 vite 或者 cli 則是 // Array 寫法 const emit = defineEmits([&amp;#39;change&amp;#39;, &amp;#39;delete&amp;#39;]) // Object 寫法 const emit = defineEmits({ change:()=&amp;gt;{}, delete:()=&amp;gt;{} }) &amp;lt;/script&amp;gt; $emit：觸發當前實際例子上的事件，附加參數也會帶進來，第一個為組件自定義名稱並且會帶入在父組件在自定義名稱裡面寫的方法或者其他，第二個跟第三個&amp;hellip;之後都是傳給綁定的參數 &amp;lt;script setup&amp;gt; this.$emit(&amp;#39;自定義的名稱&amp;#39;, 參數1, 參數2) &amp;lt;/script&amp;gt; 實際例子如下(採用cdn作為例子)： 會發現內部配置的 MeClick 使用的方法是外部的 newclick 事件 &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;btn @Me-Click=&amp;#34;newclick()&amp;#34;&amp;gt;&amp;lt;/btn&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;script src=&amp;#34;https://unpkg.</description>
    </item>
    
    <item>
      <title>VUE3 ref、reactive說明</title>
      <link>https://teduandy.github.io/blog/blogs/vue-vue3-ref-reactive-say/</link>
      <pubDate>Tue, 20 Sep 2022 08:00:00 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/vue-vue3-ref-reactive-say/</guid>
      <description>Vue3 雙向綁定用到的函數 ref 跟 reactive 區別 1. 說明： ref： 接收任何型態的資料放入，但是不會對每一個元素都進行監聽，Object 和 Array 裡面的元素也不會監聽，取值方式須使用 .value 進行取值。 reactive： 只接受 Array 跟 Object 能夠放入，並且會針對每一個元素進行監聽，同時還不需要使用 .value 去獲得值。 實際例子： &amp;lt;script lang=&amp;#39;ts&amp;#39; setup&amp;gt; import { watch, reactive, ref } from &amp;#34;vue&amp;#34;; const exampleRef = ref({number: 0}) const exampleReactive = reactive({number: 0}) // 取值方式說明 ref 部分 exampleRef.value // 才能取出放入的物件或者其他資料類型 exampleRef.value.number // 才能取出在物件裡面的元素 // 取值方式說明 reactive 部分，這邊取值就不需要再使用 .value exampleReactive.number // 直接向物件取值方式一樣，Array則是使用索引 // 底下這邊實際測試監聽狀態 watch(exampleRef, (newValue)=&amp;gt;{ console.log(newValue) }) watch(exampleReactive, (newValue)=&amp;gt;{ console.</description>
    </item>
    
    <item>
      <title>VUE3 柱狀圖實現</title>
      <link>https://teduandy.github.io/blog/blogs/vue-diagram-use/</link>
      <pubDate>Thu, 21 Jul 2022 15:13:32 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/vue-diagram-use/</guid>
      <description>說明： 需要實現一些 數據上的顯示 網路上有許多框架，但是 HIHHCHARTS 框架較為方便設定
操作方法： 1. 先在 VUE 專案裡面輸入指令安裝 npm i --save vue3-highcharts 2. 這邊不採用全域引入，使用需要再引入的方式 template 設定
&amp;lt;div class=&amp;#34;col-md-8&amp;#34;&amp;gt; &amp;lt;vue-highcharts type=&amp;#34;chart&amp;#34; &amp;lt;!-- 型態 --&amp;gt; :options=&amp;#34;chartOptions&amp;#34; &amp;lt;!-- 要綁入的參數都寫在這邊 --&amp;gt; :redrawOnUpdate=&amp;#34;true&amp;#34; :oneToOneUpdate=&amp;#34;false&amp;#34; :animateOnUpdate=&amp;#34;true&amp;#34; style=&amp;#34;width: auto&amp;#34; &amp;lt;!-- 為了讓整體填充滿整個 div --&amp;gt; /&amp;gt; &amp;lt;/div&amp;gt; script setp lang=”ts” 設定
import VueHighcharts from &amp;#34;vue3-highcharts&amp;#34;; // 分批引入使用 // 每一個 data 的 數據 const seriesData = ref([40, 50, 45, 45, 50, 45]); // 每一個 X 的 數據 const categories = ref([ &amp;#34;Python&amp;#34;, &amp;#34;JavaScript&amp;#34;, &amp;#34;C#&amp;#34;, &amp;#34;VUE&amp;#34;, &amp;#34;Asp.</description>
    </item>
    
    <item>
      <title>axios-mock-adapter為axios提供測試用的假資料</title>
      <link>https://teduandy.github.io/blog/blogs/vue-axios-mock-adapter/</link>
      <pubDate>Thu, 21 Jul 2022 15:01:51 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/vue-axios-mock-adapter/</guid>
      <description>安裝指令: npm install axios-mock-adapter --save-dev 說明: 開發時期或是要做Unit testing需要用假資料來取代server api直接回傳。
import axios from &amp;#39;axios&amp;#39; import MockAdapter from &amp;#39;axios-mock-adapter&amp;#39; let mock = new MockAdapter(axios) mock.onGet(&amp;#39;/users&amp;#39;).reply(200, { users: [ { id: 1, name: &amp;#39;John Smith&amp;#39; }, { id: 2, name: &amp;#39;John Doe&amp;#39; } ] }) axios.get(&amp;#39;/users&amp;#39;) .then(response =&amp;gt; { console.log(response.data) }) 使用方法: 創建uri跟假資料的對應很簡單, 基本上也就是’on&amp;rsquo;‘Method’, 比如說onGet, onPost, 另外還有一個onAny可以處理所有的HTTP methods 做過mock後, axios呼叫這個uri所拿回來的資料通通就都會是假資料了, 這樣也不用為了塞假資料開發測試而去改動自己的程式</description>
    </item>
    
    <item>
      <title>VUE 基礎理論</title>
      <link>https://teduandy.github.io/blog/blogs/vue-basic-theory/</link>
      <pubDate>Thu, 21 Jul 2022 14:40:49 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/vue-basic-theory/</guid>
      <description>1. Vue2的双向数据绑定原理: Vue是采用数据劫持结合发布订阅模式，通过Object.defineProperty()来劫持各个属性的getter,setter, 在数据变动时发布消息给订阅者，触发相应的回调函数，从而实现数据双向绑定。
2. SPA 单页面的理解，它的优缺点分别是什么？ SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。 一旦页面加载完成， SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。
優點： 用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染 基于上面一点，SPA 相对对服务器压力小 前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理 缺點： 初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载 前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理 SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。 3、v-show 与 v-if 有什么区别？ V-if 是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建； 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。 v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。 所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景； v-show 则适用于需要非常频繁切换条件的场景。 4、谈谈你对 Vue 生命周期的理解？ beforeCreate 组件实例被创建之初，组件的属性生效之前 created 组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用 beforeMount 在挂载开始之前被调用：相关的 render 函数首次被调用 mounted el 被新创建的 vm.</description>
    </item>
    
    <item>
      <title>VUE3 語法糖</title>
      <link>https://teduandy.github.io/blog/blogs/vue-setup-syntax-sugar/</link>
      <pubDate>Thu, 21 Jul 2022 14:16:42 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/vue-setup-syntax-sugar/</guid>
      <description>1. Vue3 的一大特性函数 &amp;mdash;- setup 說明: setup函数是 Composition API（组合API）的入口 2. data 輸出到 Template 採用兩種函數 1. ref函数 (使用常量居多)
ref 是一个函数，它接受一个参数，返回的就是一个神奇的 响应式对象 。我们初始化的这个 0 作为参数包裹到这个对象中去 ，在未来可以检测到改变并作出对应的相应
&amp;lt;script setup lang=&amp;#34;ts&amp;#34;&amp;gt; const name = ref(&amp;#34;123&amp;#34;) &amp;lt;/script&amp;gt; 2. reactive函数 (使用物件為主) 使用 ref 还是 reactive 可以选择这样的准则 第一，就像刚才的原生 javascript 的代码一样，像你平常写普通的 js 代码选择原始类型和对象类型一样来选&amp;gt; 择是使用 ref 还是 reactive。
第二，所有场景都使用 reactive，但是要记得使用 toRefs 保证 reactive 对象属性保持响应性。
&amp;lt;script setup lang=&amp;#34;ts&amp;#34;&amp;gt; const name = reactive({ name:&amp;#34;123&amp;#34;, age:20 }) &amp;lt;/script&amp;gt; 3. 生命週期鉤子 vue2 跟 vue3 對應 vue2 vue3 beforeCreate created beforeMount onBeforeMount mounted onMounted beforeUpdate onBeforeUpdate updated onUpdated beforeUnmount onBeforeUnmount unmounted onUnmounted errorCaptured onErrorCaptured renderTracked onRenderTracked renderTriggered onRenderTriggered activated onActivated deactivated onDeactivated &amp;lt;script setup lang=&amp;#34;ts&amp;#34;&amp;gt; onMounted(() =&amp;gt; { console.</description>
    </item>
    
    <item>
      <title>VUE axios 重新包裝</title>
      <link>https://teduandy.github.io/blog/blogs/vue-axios-repackage/</link>
      <pubDate>Thu, 21 Jul 2022 14:09:01 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/vue-axios-repackage/</guid>
      <description>說明: 一般使用 axios 是 直接 import 引入 雖然 後端路由 可以透過 配置 重新命名處理掉一長串的網址
但是 如果遇到了 根目錄位置不對的時候 還是要在重新命名的路由在加上之後的位置, 等於說 有使用到 axios 的都要改
這邊 VUE 有提供 二次包裝 可以在 axios 被呼叫之前 增加裡面的配置 在被呼叫出來。
使用方法(先建立一個 js 檔案 並且加入以下): // 先引入 原本安裝的 axios import axios from &amp;#34;axios&amp;#34;; // 這邊設定 產生時 自帶的 url設定(baseURL), 設定頭部則是(headers) const request = axios.create({ baseURL: &amp;#39;/ORD/ORDW1030&amp;#39;, headers: { &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39; }, }) // 這邊是輸出這個設定好的 axios (別的地方引入時輸出甚麼東西給對方使用) export default request 別人引入使用: import 自己重新命名 from 設定的 js檔案 </description>
    </item>
    
    <item>
      <title>VUE build 打包輸出修改位置</title>
      <link>https://teduandy.github.io/blog/blogs/vue-build-set-out-dir-path/</link>
      <pubDate>Thu, 21 Jul 2022 14:03:30 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/vue-build-set-out-dir-path/</guid>
      <description>說明: 輸出時 打包位置 改去別的地方 使用方法: 在 vite.config.js 配置文件裡面 的 export default defineConfig 添加這段 build:{outDir: &amp;lsquo;輸出的位置路徑&amp;rsquo;}, 打包時位置便會到輸入的路徑裡面 { build:{outDir: &amp;#39;../covid-19/covid-19/wwwRoot/app&amp;#39;}, // 配合輸出到 asp.net core 的 wwwRoot資料下底下 plugins: [vue()], } </description>
    </item>
    
    <item>
      <title>VUE 前端與後端交互 cors \ 上線時 根目錄修改方式</title>
      <link>https://teduandy.github.io/blog/blogs/vue-cors-set/</link>
      <pubDate>Thu, 21 Jul 2022 11:39:35 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/vue-cors-set/</guid>
      <description>1. CORS: 說明: 在以往前後端分離時 不同域名 或者 同域名但是不同PORT號 都會遇上 cors 跨域的問題, 一般都會在 後端 設定 cors 允許那些域名是可以進行訪問的,
但是前端設置時必須一個一個針對有寫到 ajax 的部分 url 修改, 上線時域名也會不同 , 這時候還是要在修改一次, 相當麻煩, vue 這邊 提供前端設定
cors 的方法, 並且可以針對後端的 url 取匿名 ,簡短對 ajax 使用時要填上完整的 url, 如果遇到 後端 域名換了只要修改配置文件那邊寫的後端url就
可以修改全部有 ajax 有寫到url 的地方.
使用方法: 在 vite.config.js 配置文件裡面 的 export default defineConfig 添加這段 便可以使用 . (/api 這寫法 路由會自帶 api , 不用的話用 rewrite 處理) server: { proxy: { &amp;#39;/api&amp;#39;: { target: &amp;#39;https://localhost:7181/&amp;#39;, changeOrigin: true, rewrite: (path) =&amp;gt; path.</description>
    </item>
    
  </channel>
</rss>
