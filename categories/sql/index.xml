<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL on Hugo Profile</title>
    <link>https://teduandy.github.io/blog/categories/sql/</link>
    <description>Recent content in SQL on Hugo Profile</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jan 2023 08:00:00 +0000</lastBuildDate><atom:link href="https://teduandy.github.io/blog/categories/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MSSQL 通用語法</title>
      <link>https://teduandy.github.io/blog/blogs/sql-mssql-ofter-use/</link>
      <pubDate>Wed, 04 Jan 2023 08:00:00 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/sql-mssql-ofter-use/</guid>
      <description>
1. Begin try catch 用法 說明: SQL 遇到語法無法執行，出錯時執行另外的行動 用法: Begin try // 這邊執行要執行的語法 End try Begin catch // 拋錯時需要執行的語法 End catch 2. Begin try catch 加入交易 Transaction 說明: 在執行多筆更新或者創建多筆資料時，遇到其中一筆錯誤但是其他筆都有進去，此時應該全部返還回去，重新來過，確保資料的正確性 用法: Begin try Begin Transaction // 開啟交易 // 這邊執行要執行的語法 Commit Transaction // 上面執行的語法如果能順利走到這裡則做確認交易 End try Begin catch Rollback Transaction // 上面語法出現錯誤時會跳來這邊，直接做回復資料 End catch </description>
    </item>
    
    <item>
      <title>SQL 函數使用方法</title>
      <link>https://teduandy.github.io/blog/blogs/sql-functionuse/</link>
      <pubDate>Wed, 02 Nov 2022 15:48:00 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/sql-functionuse/</guid>
      <description>1.Decode (類似if else 用法)函数 說明： Decode(表達式, 條件1, 結果1, 條件2, 結果, 其他) 實例： 表名: product
ID item price A01 口香糖 10 A01 茶葉蛋 8 A02 香菸 80 A02 報紙 10 Select ID, item, Decode(price, &amp;#39;10&amp;#39;, &amp;#39;十&amp;#39;, &amp;#39;80&amp;#39;, &amp;#39;八十&amp;#39;, &amp;#39;其他&amp;#39;) From product 輸出： ID item price A01 口香糖 十 A01 茶葉蛋 其他 A02 香菸 八十 A02 報紙 十 2.計算型函數 AVG (平均) COUNT (計數) MAX (最大值) MIN (最小值) SUM (總合) **說明：通常會搭配 Groub By 使用 ** Select &amp;#34;函數名&amp;#34;(&amp;#34;欄位名&amp;#34;) From &amp;#34;表格名&amp;#34;; 實例： 表名: product</description>
    </item>
    
    <item>
      <title>Oracle 常用進階語法</title>
      <link>https://teduandy.github.io/blog/blogs/sql-oracle-often-use/</link>
      <pubDate>Wed, 12 Oct 2022 16:54:51 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/sql-oracle-often-use/</guid>
      <description>listagg 串聯多筆成一筆 實例： ID item price A01 口香糖 10 A01 茶葉蛋 8 A02 香菸 80 A02 報紙 10 select ID, listagg(Item, &amp;#39;,&amp;#39;) within group (order by price) as ItemList from Order group by OrderNo 輸出： ID ItemList A01 茶葉蛋,口香糖 A02 報紙, 香菸 使用說明： select ID, listagg(相同ID但是欄位值不同且需要合併, 合併時使用的連接符) within group (order by 參照某個欄位讓合併的進行排序連接) as ItemList from Order group by ID </description>
    </item>
    
    <item>
      <title>SQL 通用基礎常用語法</title>
      <link>https://teduandy.github.io/blog/blogs/sql-often-use/</link>
      <pubDate>Mon, 18 Jul 2022 16:54:51 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/sql-often-use/</guid>
      <description>讀取資料 SELECT *(或者字段名) FROM 表格 WHERE 條件 AND 條件 SELECT *(或者字段名) FROM 表格 WHERE 條件 OR 條件 插入資料(單一) INSERT INTO 表名(字段名, 字段名 ) VALUES (插入的值, 插入的值) 插入多筆資料 INSERT INTO 新表名(字段名1, 字段名2, … ) SELECT 字段名1, 字段名2.. FROM 舊表明 更新語句 UPDATE 表名 SET 字段名=&amp;#34;&amp;#34;, 字段名2=&amp;#34;&amp;#34; WHERE 條件 刪除語句(表內的某一條) DELETE FROM 表名 WHERE 條件 刪除 表 DROP table 表名 刪除 資料庫 DROP database 資料庫名 創建資料庫 CREATE DATABASE 資料庫名字 CHARACTER SET utf8 創建表 CREATE TABLE 表名 (欄位名字 欄位型態 not null, 欄位名字 欄位型態, PRIMARY KEY(欄位名字)) GROUP BY 使用 SELECT Store_Name, SUM(Sales) FROM Store_Information GROUP BY Store_Name; 說明: 針對店名分組 算出 sales 總和 輸出之後為這樣 Store_Name	SUM(Sales) Los Angeles	1800 San Diego	250 Boston	700 HAVING 使用 #### 說明：HAVING 子句通常是在一個 SQL 句子的最後。一個含有 HAVING 子句的 SQL 並不一定要包含 GROUP BY 子句。example： SELECT Store_Name, SUM(Sales) FROM Store_Information GROUP BY Store_Name HAVING SUM(Sales) &amp;gt; 1500; 說明: 找出 營業額總和 大於 1500 的店家 LEFT JOIN 使用 SELECT table_column1, table_column2.</description>
    </item>
    
    <item>
      <title>SQL 運行時執行順序及些許觀念</title>
      <link>https://teduandy.github.io/blog/blogs/sql-execution-order/</link>
      <pubDate>Mon, 18 Jul 2022 16:54:51 +0000</pubDate>
      
      <guid>https://teduandy.github.io/blog/blogs/sql-execution-order/</guid>
      <description>1. SQL 執行語句時 先後順序 上面的圖片總共分四個區塊分別是：select 後面欄位、from 主表、where 條件、left join部分
1. 資料庫運行時會先從 from 主表尋找資料，再來 where 條件找跟主表相關的做排除 2. 再來 left join 部分，再來 where 條件找跟 left join 相關的做排除 3. 最後才是 select 後面欄位的建置 2. 部分觀念說明 在 join 另外一張表的時候，如果已有明確要尋找的條件，可以再 join裡面就做排除，不需要再帶不相關的資料進來，減少查詢次數，限縮資料範圍 避免在 select 欄位區塊 做子查詢，查詢次數會已次方成長，並且造成查詢速度大幅度遞減，這意思就是 最後運行到建構 欄位 每一筆因為欄位裡面有做子查詢，等同於建構每一筆資料時都要做一次查詢。 </description>
    </item>
    
  </channel>
</rss>
